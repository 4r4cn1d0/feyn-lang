-- Quantum Machine Learning Example
-- Demonstrates quantum feature extraction + differentiable optimization

-- Quantum feature extraction
let q1 = qubit(0.3) in
let q2 = qubit(0.7) in

-- Apply quantum gates
let hq1 = hadamard(q1) in
let hq2 = hadamard(q2) in

-- Measure quantum features
let m1 = measure(hq1) in
let m2 = measure(hq2) in

-- Convert to differentiable tensors
let features = tensor[m1, m2] in

-- Compute gradients for optimization
let gradients = gradient(features) in

-- Print results
print("Quantum feature 1: ");
print(m1);
print("Quantum feature 2: ");
print(m2);
print("Feature tensor: ");
print(features);
print("Feature gradients: ");
print(gradients);

-- Simple quantum neural network
let input_q = qubit(0.5) in
let input_h = hadamard(input_q) in
let input_m = measure(input_h) in

-- Hidden layer (differentiable)
let hidden = tensor[input_m, 0.5, 0.3] in
let hidden_grad = gradient(hidden) in

-- Output layer (probabilistic)
let output_dist = dist(hidden) in
let output_sample = sample(output_dist) in

print("Input measurement: ");
print(input_m);
print("Hidden layer: ");
print(hidden);
print("Hidden gradients: ");
print(hidden_grad);
print("Output sample: ");
print(output_sample)
